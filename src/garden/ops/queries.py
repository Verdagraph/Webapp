# Standard Library
import uuid
from datetime import datetime

# External Libraries
from svcs import Container

# VerdanTech Source
from src import settings
from src.common.interfaces.persistence.uow import AbstractUow
from src.common.ops.queries import QueryResult, RefSchema, query_result_transform
from src.environment.domain import Environment
from src.garden.domain import (
    Garden,
    GardenMembership,
    RoleEnum,
    VisibilityEnum,
    generate_garden_key,
)
from src.user.domain import User

# ======================================
# QueryResults
# ======================================


@query_result_transform
class GardenMembershipPublicSchema(QueryResult[GardenMembership]):
    """Schema for returning a brief, public representation of a GardenMembership."""

    garden_ref: RefSchema[Garden]
    user_ref: RefSchema[User]
    role: RoleEnum
    created_at: datetime


@query_result_transform
class GardenMembershipFullSchema(QueryResult[GardenMembership]):
    """Schema for returning a detailed representation of a GardenMembership."""

    garden_ref: RefSchema[Garden]
    user_ref: RefSchema[User]
    inviter_ref: RefSchema[User] | None
    role: RoleEnum
    accepted: bool
    favorite: bool
    created_at: datetime


@query_result_transform
class GardenPublicSchema(QueryResult[Garden]):
    """Schema for returning a public representation of a Garden."""

    id: uuid.UUID
    name: str
    key: str
    creator_ref: RefSchema[User] | None
    visibility: VisibilityEnum
    num_memberships: int
    memberships: set[GardenMembershipPublicSchema]
    description: str


@query_result_transform
class GardenFullSchema(QueryResult[Garden]):
    """Schema for returning a detailed representation of a Garden."""

    id: uuid.UUID
    name: str
    key: str
    creator_ref: RefSchema[User] | None
    visibility: VisibilityEnum
    environment_ref: RefSchema[Environment] | None
    num_memberships: int
    memberships: set[GardenMembershipFullSchema]
    description: str
    expired: bool


@query_result_transform
class UniqueGardenKeyResult(QueryResult[None]):
    """Schema for returning a unique garden key generated by the server."""

    key: str


# ======================================
# Queries
# ======================================

# ======================================
# Query handlers
# ======================================


async def generate_unique_garden_key(
    svcs_container: Container, client: User
) -> UniqueGardenKeyResult:
    """
    Generate a unique garden key for the client.

    Args:
        svcs_container (Container): service locator.
        client (User): the client user.
    """
    # Locate services
    uow = await svcs_container.aget(AbstractUow)

    async with uow:
        # Generate an initial key
        key = generate_garden_key(use_random_plant_name=True)

        # While the key exists, generate a new key.
        # If more than MAX_GARDEN_RANDOM_PLANT_KEY_GENERATION_ATTEMPTS,
        # stop using random plant names (in case they are all taken).
        attempts: int = 0
        while await uow.repos.gardens.key_exists(key):
            if attempts > settings.MAX_GARDEN_RANDOM_PLANT_KEY_GENERATION_ATTEMPTS:
                key = generate_garden_key(use_random_plant_name=False)
            else:
                key = generate_garden_key(use_random_plant_name=True)
            attempts += 1

        return UniqueGardenKeyResult(key=key)
