/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * VerdanTech Webapp Server
 * Server of the VerdanTech web application.
 * OpenAPI spec version: 0.0.1
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

export const getUserLoginResponseMock = (): string => faker.word.sample();

export const getUserRefreshResponseMock = (): string => faker.word.sample();

export const getUserCreateResponseMock = (): string => faker.word.sample();

export const getUserUpdateResponseMock = (): string => faker.word.sample();

export const getUserRequestEmailConfirmationResponseMock = (): string =>
	faker.word.sample();

export const getUserConfirmEmailResponseMock = (): string => faker.word.sample();

export const getUserRequestPasswordResetResponseMock = (): string =>
	faker.word.sample();

export const getUserConfirmPasswordResetResponseMock = (): string =>
	faker.word.sample();

export const getUserLoginMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/login', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserLoginResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserRefreshMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/refresh', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserRefreshResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserCreateMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/create', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserCreateResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserUpdateMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/update', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserUpdateResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserRequestEmailConfirmationMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/requestEmailConfirmation', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserRequestEmailConfirmationResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserConfirmEmailMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/confirmEmail', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserConfirmEmailResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserRequestPasswordResetMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/requestPasswordReset', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserRequestPasswordResetResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserConfirmPasswordResetMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/confirmPasswordReset', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserConfirmPasswordResetResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};
export const getUserMock = () => [
	getUserLoginMockHandler(),
	getUserRefreshMockHandler(),
	getUserCreateMockHandler(),
	getUserUpdateMockHandler(),
	getUserRequestEmailConfirmationMockHandler(),
	getUserConfirmEmailMockHandler(),
	getUserRequestPasswordResetMockHandler(),
	getUserConfirmPasswordResetMockHandler()
];
