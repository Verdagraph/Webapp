/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * VerdanTech-Backend
 * Backend API of the VerdanTech software project.
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type {
	CultivarCollectionFullSchema,
	CultivarCollectionGetByClientResult,
	CultivarCollectionGetByGardenResult,
	FrostDatePlantingWindowProfile,
	OriginProfile,
	RefSchema
} from '../../types';

export const getCultivarCollectionCreateCommandOpResponseMock = (): string =>
	faker.word.sample();

export const getCultivarCreateCommandOpResponseMock = (): string => faker.word.sample();

export const getCultivarCollectionDeleteCommandOpResponseMock = (): string =>
	faker.word.sample();

export const getCultivarDeleteCommandOpResponseMock = (): string => faker.word.sample();

export const getCultivarCollectionDuplicateCommandOpResponseMock = (): string =>
	faker.word.sample();

export const getCultivarCollectionMergeCommandOpResponseMock = (): string =>
	faker.word.sample();

export const getCultivarCollectionUpdateCommandOpResponseMock = (): string =>
	faker.word.sample();

export const getCultivarUpdateCommandOpResponseMock = (): string => faker.word.sample();

export const getCultivarGetByClientQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse });

export const getCultivarGetByClientQueryOpResponseMock = (
	overrideResponse: Partial<CultivarCollectionGetByClientResult> = {}
): CultivarCollectionGetByClientResult => ({
	collections: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
		description: faker.word.sample(),
		garden_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getCultivarGetByClientQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		id: faker.string.uuid(),
		name: faker.word.sample(),
		parent_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getCultivarGetByClientQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		slug: faker.word.sample(),
		tags: Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1
		).map(() => faker.word.sample()),
		user_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getCultivarGetByClientQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
	})),
	...overrideResponse
});

export const getCultivarCollectionGetByGardenQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse });

export const getCultivarCollectionGetByGardenQueryOpResponseMock = (
	overrideResponse: Partial<CultivarCollectionGetByGardenResult> = {}
): CultivarCollectionGetByGardenResult => ({
	active_collection: { id: faker.string.uuid() },
	collections: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
		description: faker.word.sample(),
		garden_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getCultivarCollectionGetByGardenQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		id: faker.string.uuid(),
		name: faker.word.sample(),
		parent_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getCultivarCollectionGetByGardenQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		slug: faker.word.sample(),
		tags: Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1
		).map(() => faker.word.sample()),
		user_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getCultivarCollectionGetByGardenQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
	})),
	...overrideResponse
});

export const getCultivarCollectionGetByIdsQueryOpResponseFrostDatePlantingWindowProfileMock =
	(
		overrideResponse: Partial<FrostDatePlantingWindowProfile> = {}
	): FrostDatePlantingWindowProfile => ({
		...{
			first_frost_window_close: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					faker.number.int({ min: undefined, max: undefined })
				]),
				undefined
			]),
			first_frost_window_open: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					faker.number.int({ min: undefined, max: undefined })
				]),
				undefined
			]),
			last_frost_window_close: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					faker.number.int({ min: undefined, max: undefined })
				]),
				undefined
			]),
			last_frost_window_open: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					faker.number.int({ min: undefined, max: undefined })
				]),
				undefined
			])
		},
		...overrideResponse
	});

export const getCultivarCollectionGetByIdsQueryOpResponseOriginProfileMock = (
	overrideResponse: Partial<OriginProfile> = {}
): OriginProfile => ({
	...{
		_allowed_origins: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				faker.helpers.arrayElements([
					'direct seed',
					'seed transplant',
					'seedling transplant'
				] as const)
			]),
			undefined
		])
	},
	...overrideResponse
});

export const getCultivarCollectionGetByIdsQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse });

export const getCultivarCollectionGetByIdsQueryOpResponseMock =
	(): CultivarCollectionFullSchema[] =>
		Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
			() => ({
				created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
				cultivars: Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1
				).map(() => ({
					attributes: {
						frost_date_planting_window_profile: faker.helpers.arrayElement([
							faker.helpers.arrayElement([
								null,
								{
									...getCultivarCollectionGetByIdsQueryOpResponseFrostDatePlantingWindowProfileMock()
								}
							]),
							undefined
						]),
						origin_profile: faker.helpers.arrayElement([
							faker.helpers.arrayElement([
								null,
								{ ...getCultivarCollectionGetByIdsQueryOpResponseOriginProfileMock() }
							]),
							undefined
						])
					},
					created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
					description: faker.word.sample(),
					id: faker.string.uuid(),
					key: faker.word.sample(),
					names: Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1
					).map(() => faker.word.sample()),
					parent_id: faker.helpers.arrayElement([
						faker.helpers.arrayElement([null, faker.string.uuid()]),
						undefined
					]),
					scientific_name: faker.word.sample()
				})),
				description: faker.word.sample(),
				garden_ref: faker.helpers.arrayElement([
					faker.helpers.arrayElement([
						null,
						{ ...getCultivarCollectionGetByIdsQueryOpResponseRefSchemaMock() }
					]),
					undefined
				]),
				id: faker.string.uuid(),
				name: faker.word.sample(),
				parent_ref: faker.helpers.arrayElement([
					faker.helpers.arrayElement([
						null,
						{ ...getCultivarCollectionGetByIdsQueryOpResponseRefSchemaMock() }
					]),
					undefined
				]),
				slug: faker.word.sample(),
				tags: Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1
				).map(() => faker.word.sample()),
				user_ref: faker.helpers.arrayElement([
					faker.helpers.arrayElement([
						null,
						{ ...getCultivarCollectionGetByIdsQueryOpResponseRefSchemaMock() }
					]),
					undefined
				]),
				visibility: faker.helpers.arrayElement([
					'private',
					'unlisted',
					'public'
				] as const)
			})
		);

export const getCultivarCollectionCreateCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/create_collection', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarCollectionCreateCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarCreateCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/create_cultivar', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarCreateCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarCollectionDeleteCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/delete_collection', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarCollectionDeleteCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarDeleteCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/delete_cultivar', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarDeleteCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarCollectionDuplicateCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/duplicate_collection', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarCollectionDuplicateCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarCollectionMergeCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/merge_collection', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarCollectionMergeCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarCollectionUpdateCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/update_collection', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarCollectionUpdateCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarUpdateCommandOpMockHandler = () => {
	return http.post('*/cultivars/command/update_cultivar', async () => {
		await delay(1000);
		return new HttpResponse(getCultivarUpdateCommandOpResponseMock(), {
			status: 201,
			headers: {
				'Content-Type': 'text/plain'
			}
		});
	});
};

export const getCultivarGetByClientQueryOpMockHandler = (
	overrideResponse?:
		| CultivarCollectionGetByClientResult
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) =>
				| Promise<CultivarCollectionGetByClientResult>
				| CultivarCollectionGetByClientResult)
) => {
	return http.get('*/cultivars/query/get_by_client', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCultivarGetByClientQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getCultivarCollectionGetByGardenQueryOpMockHandler = (
	overrideResponse?:
		| CultivarCollectionGetByGardenResult
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) =>
				| Promise<CultivarCollectionGetByGardenResult>
				| CultivarCollectionGetByGardenResult)
) => {
	return http.get('*/cultivars/query/get_by_garden', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCultivarCollectionGetByGardenQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getCultivarCollectionGetByIdsQueryOpMockHandler = (
	overrideResponse?:
		| CultivarCollectionFullSchema[]
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<CultivarCollectionFullSchema[]> | CultivarCollectionFullSchema[])
) => {
	return http.get('*/cultivars/query/get_by_ids', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCultivarCollectionGetByIdsQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};
export const getCultivarsMock = () => [
	getCultivarCollectionCreateCommandOpMockHandler(),
	getCultivarCreateCommandOpMockHandler(),
	getCultivarCollectionDeleteCommandOpMockHandler(),
	getCultivarDeleteCommandOpMockHandler(),
	getCultivarCollectionDuplicateCommandOpMockHandler(),
	getCultivarCollectionMergeCommandOpMockHandler(),
	getCultivarCollectionUpdateCommandOpMockHandler(),
	getCultivarUpdateCommandOpMockHandler(),
	getCultivarGetByClientQueryOpMockHandler(),
	getCultivarCollectionGetByGardenQueryOpMockHandler(),
	getCultivarCollectionGetByIdsQueryOpMockHandler()
];
