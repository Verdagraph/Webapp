/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * VerdanTech-Backend
 * Backend API of the VerdanTech software project.
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type {
	GardenAssociatedPartialsResult,
	GardenFullSchema,
	GardenPartialSchema,
	GardenPendingInvitesResult,
	GardenUniqueKeyResult,
	RefSchema
} from '../../types'

export const getGardenAssociatedPartialsQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse })

export const getGardenAssociatedPartialsQueryOpResponseMock = (
	overrideResponse: Partial<GardenAssociatedPartialsResult> = {}
): GardenAssociatedPartialsResult => ({
	admin_memberships: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => faker.string.uuid()),
	edit_memberships: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => faker.string.uuid()),
	favorites: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => faker.string.uuid()),
	gardens: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		creator_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getGardenAssociatedPartialsQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		id: faker.string.uuid(),
		key: faker.word.sample(),
		name: faker.word.sample(),
		num_memberships: faker.number.int({ min: undefined, max: undefined }),
		visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
	})),
	view_memberships: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => faker.string.uuid()),
	...overrideResponse
})

export const getGardenFullByKeyQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse })

export const getGardenFullByKeyQueryOpResponseMock = (
	overrideResponse: Partial<GardenFullSchema> = {}
): GardenFullSchema => ({
	creator_ref: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			null,
			{ ...getGardenFullByKeyQueryOpResponseRefSchemaMock() }
		]),
		undefined
	]),
	description: faker.word.sample(),
	environment_ref: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			null,
			{ ...getGardenFullByKeyQueryOpResponseRefSchemaMock() }
		]),
		undefined
	]),
	expired: faker.datatype.boolean(),
	id: faker.string.uuid(),
	key: faker.word.sample(),
	memberships: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		accepted: faker.datatype.boolean(),
		created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
		favorite: faker.datatype.boolean(),
		inviter_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				null,
				{ ...getGardenFullByKeyQueryOpResponseRefSchemaMock() }
			]),
			undefined
		]),
		role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
		user_ref: { id: faker.string.uuid() }
	})),
	name: faker.word.sample(),
	num_memberships: faker.number.int({ min: undefined, max: undefined }),
	visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const),
	...overrideResponse
})

export const getGardenGenerateUniqueKeyQueryOpResponseMock = (
	overrideResponse: Partial<GardenUniqueKeyResult> = {}
): GardenUniqueKeyResult => ({ key: faker.word.sample(), ...overrideResponse })

export const getGardenMostRelevantPartialsQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse })

export const getGardenMostRelevantPartialsQueryOpResponseMock =
	(): GardenPartialSchema[] =>
		Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
			() => ({
				creator_ref: faker.helpers.arrayElement([
					faker.helpers.arrayElement([
						null,
						{ ...getGardenMostRelevantPartialsQueryOpResponseRefSchemaMock() }
					]),
					undefined
				]),
				id: faker.string.uuid(),
				key: faker.word.sample(),
				name: faker.word.sample(),
				num_memberships: faker.number.int({ min: undefined, max: undefined }),
				visibility: faker.helpers.arrayElement([
					'private',
					'unlisted',
					'public'
				] as const)
			})
		)

export const getGardenPartialsByKeysQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse })

export const getGardenPartialsByKeysQueryOpResponseMock = (): GardenPartialSchema[] =>
	Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
		() => ({
			creator_ref: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					{ ...getGardenPartialsByKeysQueryOpResponseRefSchemaMock() }
				]),
				undefined
			]),
			id: faker.string.uuid(),
			key: faker.word.sample(),
			name: faker.word.sample(),
			num_memberships: faker.number.int({ min: undefined, max: undefined }),
			visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
		})
	)

export const getGardenPendingInvitesQueryOpResponseRefSchemaMock = (
	overrideResponse: Partial<RefSchema> = {}
): RefSchema => ({ ...{ id: faker.string.uuid() }, ...overrideResponse })

export const getGardenPendingInvitesQueryOpResponseMock = (
	overrideResponse: Partial<GardenPendingInvitesResult> = {}
): GardenPendingInvitesResult => ({
	pending_invites: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		garden: {
			creator_ref: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					{ ...getGardenPendingInvitesQueryOpResponseRefSchemaMock() }
				]),
				undefined
			]),
			id: faker.string.uuid(),
			key: faker.word.sample(),
			name: faker.word.sample(),
			num_memberships: faker.number.int({ min: undefined, max: undefined }),
			visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
		},
		invite: {
			accepted: faker.datatype.boolean(),
			created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
			favorite: faker.datatype.boolean(),
			inviter_ref: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					null,
					{ ...getGardenPendingInvitesQueryOpResponseRefSchemaMock() }
				]),
				undefined
			]),
			role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
			user_ref: { id: faker.string.uuid() }
		}
	})),
	...overrideResponse
})

export const getGardenMembershipAcceptCommandOpMockHandler = () => {
	return http.post('*/gardens/command/accept_invite', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getGardenMembershipRoleChangeCommandOpMockHandler = () => {
	return http.post('*/gardens/command/change_role', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getGardenCreateCommandOpMockHandler = () => {
	return http.post('*/gardens/command/create', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getGardenMembershipCreateCommandOpMockHandler = () => {
	return http.post('*/gardens/command/invite', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getGardenMembershipDeleteCommandOpMockHandler = () => {
	return http.post('*/gardens/command/leave', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getGardenMembershipRevokeCommandOpMockHandler = () => {
	return http.post('*/gardens/command/revoke', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getGardenAssociatedPartialsQueryOpMockHandler = (
	overrideResponse?:
		| GardenAssociatedPartialsResult
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<GardenAssociatedPartialsResult> | GardenAssociatedPartialsResult)
) => {
	return http.get('*/gardens/query/associated_partials', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGardenAssociatedPartialsQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}

export const getGardenFullByKeyQueryOpMockHandler = (
	overrideResponse?:
		| GardenFullSchema
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<GardenFullSchema> | GardenFullSchema)
) => {
	return http.get('*/gardens/query/full_by_key', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGardenFullByKeyQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}

export const getGardenGenerateUniqueKeyQueryOpMockHandler = (
	overrideResponse?:
		| GardenUniqueKeyResult
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<GardenUniqueKeyResult> | GardenUniqueKeyResult)
) => {
	return http.get('*/gardens/query/generate_unique_key', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGardenGenerateUniqueKeyQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}

export const getGardenMostRelevantPartialsQueryOpMockHandler = (
	overrideResponse?:
		| GardenPartialSchema[]
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<GardenPartialSchema[]> | GardenPartialSchema[])
) => {
	return http.get('*/gardens/query/most_relevant', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGardenMostRelevantPartialsQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}

export const getGardenPartialsByKeysQueryOpMockHandler = (
	overrideResponse?:
		| GardenPartialSchema[]
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<GardenPartialSchema[]> | GardenPartialSchema[])
) => {
	return http.get('*/gardens/query/partials_by_key', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGardenPartialsByKeysQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}

export const getGardenPendingInvitesQueryOpMockHandler = (
	overrideResponse?:
		| GardenPendingInvitesResult
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<GardenPendingInvitesResult> | GardenPendingInvitesResult)
) => {
	return http.get('*/gardens/query/pending_invites', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGardenPendingInvitesQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}
export const getGardensMock = () => [
	getGardenMembershipAcceptCommandOpMockHandler(),
	getGardenMembershipRoleChangeCommandOpMockHandler(),
	getGardenCreateCommandOpMockHandler(),
	getGardenMembershipCreateCommandOpMockHandler(),
	getGardenMembershipDeleteCommandOpMockHandler(),
	getGardenMembershipRevokeCommandOpMockHandler(),
	getGardenAssociatedPartialsQueryOpMockHandler(),
	getGardenFullByKeyQueryOpMockHandler(),
	getGardenGenerateUniqueKeyQueryOpMockHandler(),
	getGardenMostRelevantPartialsQueryOpMockHandler(),
	getGardenPartialsByKeysQueryOpMockHandler(),
	getGardenPendingInvitesQueryOpMockHandler()
]
