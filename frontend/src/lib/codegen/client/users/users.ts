/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * VerdanTech-Backend
 * Backend API of the VerdanTech software project.
 * OpenAPI spec version: 0.1.0
 */
import type {
	AccessInfoResult,
	UserConfirmEmailConfirmationCommand,
	UserConfirmPasswordResetCommand,
	UserCreateCommand,
	UserFullSchema,
	UserPasswordVerificationQuery,
	UserPublicProfilesQueryOpParams,
	UserPublicSchema,
	UserRequestEmailConfirmationCommand,
	UserRequestPasswordResetCommand,
	UsernameExistsQueryOpParams
} from '../../types';
import { axiosClient } from '../../../data/customAxios';

/**
 * Authenticate the request with JWT cookie authentication.
 * @summary User login
 */
export const userLoginCommandOp = (
	userPasswordVerificationQuery: UserPasswordVerificationQuery
) => {
	return axiosClient<AccessInfoResult>({
		url: `/users/auth/login`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: userPasswordVerificationQuery
	});
};
/**
 * Refresh the authentication process for security..
 * @summary User authentication refresh
 */
export const userRefreshCommandOp = () => {
	return axiosClient<AccessInfoResult>({ url: `/users/auth/refresh`, method: 'POST' });
};
/**
 * Registers a new user. Requires email confirmation: False.
 * @summary User registration.
 */
export const userCreateCommandOp = (userCreateCommand: UserCreateCommand) => {
	return axiosClient<string>({
		url: `/users/command/create`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: userCreateCommand
	});
};
/**
 * Closes an email confirmation and verifies the email address.
 * @summary Email confirmation.
 */
export const userConfirmEmailConfirmationCommandOp = (
	userConfirmEmailConfirmationCommand: UserConfirmEmailConfirmationCommand
) => {
	return axiosClient<string>({
		url: `/users/command/email/verification_confirm`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: userConfirmEmailConfirmationCommand
	});
};
/**
 * Requests a new email verification email be sent to the email address.
 * @summary Email confirmation request.
 */
export const userRequestEmailConfirmationCommandOp = (
	userRequestEmailConfirmationCommand: UserRequestEmailConfirmationCommand
) => {
	return axiosClient<string>({
		url: `/users/command/email/verification_request`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: userRequestEmailConfirmationCommand
	});
};
/**
 * Closes a password reset request and changes the password
 * @summary Password reset confirm.
 */
export const userConfirmPasswordResetCommandOp = (
	userConfirmPasswordResetCommand: UserConfirmPasswordResetCommand
) => {
	return axiosClient<string>({
		url: `/users/command/password/confirm`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: userConfirmPasswordResetCommand
	});
};
/**
 * Open a new password reset request and sends confirmation email.
 * @summary Password reset request.
 */
export const userRequestPasswordResetCommandOp = (
	userRequestPasswordResetCommand: UserRequestPasswordResetCommand
) => {
	return axiosClient<string>({
		url: `/users/command/password/request`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: userRequestPasswordResetCommand
	});
};
/**
 * Returns the profile of the authenticated user.
 * @summary User client profile view.
 */
export const userClientProfileQueryOp = () => {
	return axiosClient<UserFullSchema>({
		url: `/users/query/client_profile`,
		method: 'GET'
	});
};
/**
 * Returns the profiles of the user ids given.
 * @summary User public profiles view.
 */
export const userPublicProfilesQueryOp = (params: UserPublicProfilesQueryOpParams) => {
	return axiosClient<UserPublicSchema[]>({
		url: `/users/query/public_profiles`,
		method: 'GET',
		params
	});
};
/**
 * Returns true if the given username exists.
 * @summary Checks whether a username exists.
 */
export const usernameExistsQueryOp = (params: UsernameExistsQueryOpParams) => {
	return axiosClient<boolean>({
		url: `/users/query/username_exists`,
		method: 'GET',
		params
	});
};
export type UserLoginCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userLoginCommandOp>>
>;
export type UserRefreshCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userRefreshCommandOp>>
>;
export type UserCreateCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userCreateCommandOp>>
>;
export type UserConfirmEmailConfirmationCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userConfirmEmailConfirmationCommandOp>>
>;
export type UserRequestEmailConfirmationCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userRequestEmailConfirmationCommandOp>>
>;
export type UserConfirmPasswordResetCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userConfirmPasswordResetCommandOp>>
>;
export type UserRequestPasswordResetCommandOpResult = NonNullable<
	Awaited<ReturnType<typeof userRequestPasswordResetCommandOp>>
>;
export type UserClientProfileQueryOpResult = NonNullable<
	Awaited<ReturnType<typeof userClientProfileQueryOp>>
>;
export type UserPublicProfilesQueryOpResult = NonNullable<
	Awaited<ReturnType<typeof userPublicProfilesQueryOp>>
>;
export type UsernameExistsQueryOpResult = NonNullable<
	Awaited<ReturnType<typeof usernameExistsQueryOp>>
>;
