/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * VerdanTech-Backend
 * Backend API of the VerdanTech software project.
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type { UserFullSchema, UserPublicSchema } from '../../types'

export const getUserClientProfileQueryOpResponseMock = (
	overrideResponse: Partial<UserFullSchema> = {}
): UserFullSchema => ({
	created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
	emails: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		address: faker.word.sample(),
		primary: faker.datatype.boolean(),
		verified: faker.datatype.boolean()
	})),
	id: faker.string.uuid(),
	is_superuser: faker.datatype.boolean(),
	username: faker.word.sample(),
	...overrideResponse
})

export const getUserPublicProfilesQueryOpResponseMock = (): UserPublicSchema[] =>
	Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
		() => ({ id: faker.string.uuid(), username: faker.word.sample() })
	)

export const getUserCreateCommandOpMockHandler = () => {
	return http.post('*/vdtapi/users/commands/create', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getUserConfirmEmailConfirmationCommandOpMockHandler = () => {
	return http.post('*/vdtapi/users/commands/email/verification_confirm', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getUserRequestEmailConfirmationCommandOpMockHandler = () => {
	return http.post('*/vdtapi/users/commands/email/verification_request', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getUserLoginCommandOpMockHandler = () => {
	return http.post('*/vdtapi/users/commands/login', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getUserConfirmPasswordResetCommandOpMockHandler = () => {
	return http.post('*/vdtapi/users/commands/password/confirm', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getUserRequestPasswordResetCommandOpMockHandler = () => {
	return http.post('*/vdtapi/users/commands/password/request', async () => {
		await delay(1000)
		return new HttpResponse(null, {
			status: 201,
			headers: {
				'Content-Type': 'application/json'
			}
		})
	})
}

export const getUserClientProfileQueryOpMockHandler = (
	overrideResponse?:
		| UserFullSchema
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<UserFullSchema> | UserFullSchema)
) => {
	return http.get('*/vdtapi/users/queries/client_profile', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserClientProfileQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}

export const getUserPublicProfilesQueryOpMockHandler = (
	overrideResponse?:
		| UserPublicSchema[]
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0]
		  ) => Promise<UserPublicSchema[]> | UserPublicSchema[])
) => {
	return http.get('*/vdtapi/users/queries/public_profiles', async (info) => {
		await delay(1000)
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserPublicProfilesQueryOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		)
	})
}
export const getUsersMock = () => [
	getUserCreateCommandOpMockHandler(),
	getUserConfirmEmailConfirmationCommandOpMockHandler(),
	getUserRequestEmailConfirmationCommandOpMockHandler(),
	getUserLoginCommandOpMockHandler(),
	getUserConfirmPasswordResetCommandOpMockHandler(),
	getUserRequestPasswordResetCommandOpMockHandler(),
	getUserClientProfileQueryOpMockHandler(),
	getUserPublicProfilesQueryOpMockHandler()
]
