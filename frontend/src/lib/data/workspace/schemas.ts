/**
 * Central file to store descriptions of valid mutation schemas.
 * Collates generated typescript schema metadata from the backend.
 * May be autogenerated as well eventually.
 */
import { z as zod } from 'zod';
import workspaceFields from '$lib/backendSchema/specs/workspace';

export const workspaceFieldSchemas = {
	/** Workspace. */
	workspace_name: zod
		.string()
		.min(
			workspaceFields.workspace_name.min_length.value,
			workspaceFields.workspace_name.min_length.message
		)
		.max(
			workspaceFields.workspace_name.max_length.value,
			workspaceFields.workspace_name.max_length.message
		)
		.regex(
			workspaceFields.workspace_name.pattern.value,
			workspaceFields.workspace_name.pattern.message
		)
		.describe(workspaceFields.workspace_name.description),
	workspace_description: zod
		.string()
		.max(
			workspaceFields.workspace_description.max_length.value,
			workspaceFields.workspace_description.max_length.message
		)
		.describe(workspaceFields.workspace_description.description),
	/** Planting area. */
	planting_area_name: zod
		.string()
		.min(
			workspaceFields.planting_area_name.min_length.value,
			workspaceFields.planting_area_name.min_length.message
		)
		.max(
			workspaceFields.planting_area_name.max_length.value,
			workspaceFields.planting_area_name.max_length.message
		)
		.regex(
			workspaceFields.planting_area_name.pattern.value,
			workspaceFields.planting_area_name.pattern.message
		)
		.describe(workspaceFields.planting_area_name.description),
	planting_area_description: zod
		.string()
		.max(
			workspaceFields.planting_area_description.max_length.value,
			workspaceFields.planting_area_description.max_length.message
		)
		.describe(workspaceFields.planting_area_description.description),
};
