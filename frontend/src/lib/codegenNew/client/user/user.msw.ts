/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * VerdanTech Webapp Server
 * Server of the VerdanTech web application.
 * OpenAPI spec version: 0.0.1
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

export const getUserLoginOpResponseMock = (): string => faker.word.sample();

export const getUserRefreshOpResponseMock = (): string => faker.word.sample();

export const getUserCreateOpResponseMock = (): string => faker.word.sample();

export const getUserUpdateOpResponseMock = (): string => faker.word.sample();

export const getUserRequestEmailConfirmationResponseMock = (): string =>
	faker.word.sample();

export const getUserConfirmEmailOpResponseMock = (): string => faker.word.sample();

export const getUserRequestPasswordResetOpResponseMock = (): string =>
	faker.word.sample();

export const getUserConfirmPasswordResetOpResponseMock = (): string =>
	faker.word.sample();

export const getUserLoginOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/login', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserLoginOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserRefreshOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/refresh', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserRefreshOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserCreateOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/create', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserCreateOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserUpdateOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/update', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserUpdateOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserRequestEmailConfirmationMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/requestEmailConfirmationOp', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserRequestEmailConfirmationResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserConfirmEmailOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/confirmEmail', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserConfirmEmailOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserRequestPasswordResetOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/requestPasswordReset', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserRequestPasswordResetOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};

export const getUserConfirmPasswordResetOpMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/confirmPasswordReset', async (info) => {
		await delay(1000);
		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUserConfirmPasswordResetOpResponseMock()
			),
			{
				status: 200,
				headers: {
					'Content-Type': 'application/json'
				}
			}
		);
	});
};
export const getUserMock = () => [
	getUserLoginOpMockHandler(),
	getUserRefreshOpMockHandler(),
	getUserCreateOpMockHandler(),
	getUserUpdateOpMockHandler(),
	getUserRequestEmailConfirmationMockHandler(),
	getUserConfirmEmailOpMockHandler(),
	getUserRequestPasswordResetOpMockHandler(),
	getUserConfirmPasswordResetOpMockHandler()
];
