/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * VerdanTech-API
 * API of the VerdanTech Project Web Application
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { createQuery, createMutation } from '@tanstack/svelte-query';
import type {
	CreateQueryOptions,
	CreateMutationOptions,
	QueryFunction,
	MutationFunction,
	CreateQueryResult,
	QueryKey
} from '@tanstack/svelte-query';
import type { CSRFToken, Login, LoginRequest } from '../verdanTechAPI.schemas';

/**
 * Returns valid CSRF token
 */
export const authCsrfRetrieve = (
	options?: AxiosRequestConfig
): Promise<AxiosResponse<CSRFToken>> => {
	return axios.get(`/api/auth/csrf`, options);
};

export const getAuthCsrfRetrieveQueryKey = () => [`/api/auth/csrf`];

export type AuthCsrfRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof authCsrfRetrieve>>>;
export type AuthCsrfRetrieveQueryError = AxiosError<unknown>;

export const createAuthCsrfRetrieve = <
	TData = Awaited<ReturnType<typeof authCsrfRetrieve>>,
	TError = AxiosError<unknown>
>(options?: {
	query?: CreateQueryOptions<Awaited<ReturnType<typeof authCsrfRetrieve>>, TError, TData>;
	axios?: AxiosRequestConfig;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAuthCsrfRetrieveQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof authCsrfRetrieve>>> = ({ signal }) =>
		authCsrfRetrieve({ signal, ...axiosOptions });

	const query = createQuery<Awaited<ReturnType<typeof authCsrfRetrieve>>, TError, TData>({
		queryKey,
		queryFn,
		...queryOptions
	}) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Login using Session authentication.
Requires CSRF token to prevent login-csrf,
see: https://docs.djangoproject.com/en/4.1/ref/csrf/
 */
export const authLoginCreate = (
	loginRequest: LoginRequest,
	options?: AxiosRequestConfig
): Promise<AxiosResponse<Login>> => {
	return axios.post(`/api/auth/login`, loginRequest, options);
};

export type AuthLoginCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof authLoginCreate>>
>;
export type AuthLoginCreateMutationBody = LoginRequest;
export type AuthLoginCreateMutationError = AxiosError<unknown>;

export const createAuthLoginCreate = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof authLoginCreate>>,
		TError,
		{ data: LoginRequest },
		TContext
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof authLoginCreate>>,
		{ data: LoginRequest }
	> = (props) => {
		const { data } = props ?? {};

		return authLoginCreate(data, axiosOptions);
	};

	return createMutation<
		Awaited<ReturnType<typeof authLoginCreate>>,
		TError,
		{ data: LoginRequest },
		TContext
	>(mutationFn, mutationOptions);
};
/**
 * Calls Django logout methods and deletes the sessionid assigned to the user object
 */
export const authLogoutCreate = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
	return axios.post(`/api/auth/logout`, undefined, options);
};

export type AuthLogoutCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof authLogoutCreate>>
>;

export type AuthLogoutCreateMutationError = AxiosError<unknown>;

export const createAuthLogoutCreate = <
	TError = AxiosError<unknown>,
	TVariables = void,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof authLogoutCreate>>,
		TError,
		TVariables,
		TContext
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof authLogoutCreate>>,
		TVariables
	> = () => {
		return authLogoutCreate(axiosOptions);
	};

	return createMutation<Awaited<ReturnType<typeof authLogoutCreate>>, TError, TVariables, TContext>(
		mutationFn,
		mutationOptions
	);
};
