/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * VerdanTech Webapp Server
 * Server of the VerdanTech web application.
 * OpenAPI spec version: 0.0.1
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

export const getPostUsersLoginResponseMock = (): string => faker.word.sample();

export const getPostUsersRefreshResponseMock = (): string => faker.word.sample();

export const getPostUsersCreateResponseMock = (): string => faker.word.sample();

export const getPostUsersUpdateResponseMock = (): string => faker.word.sample();

export const getPostUsersRequestEmailConfirmationResponseMock = (): string =>
	faker.word.sample();

export const getPostUsersConfirmEmailResponseMock = (): string => faker.word.sample();

export const getPostUsersRequestPasswordResetResponseMock = (): string =>
	faker.word.sample();

export const getPostUsersConfirmPasswordResetResponseMock = (): string =>
	faker.word.sample();

export const getPostUsersLoginMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/login', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersLoginResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersRefreshMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/refresh', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersRefreshResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersCreateMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/create', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersCreateResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersUpdateMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/update', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersUpdateResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersRequestEmailConfirmationMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/requestEmailConfirmation', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersRequestEmailConfirmationResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersConfirmEmailMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/confirmEmail', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersConfirmEmailResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersRequestPasswordResetMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/requestPasswordReset', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersRequestPasswordResetResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};

export const getPostUsersConfirmPasswordResetMockHandler = (
	overrideResponse?:
		| string
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0]
		  ) => Promise<string> | string)
) => {
	return http.post('*/users/confirmPasswordReset', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPostUsersConfirmPasswordResetResponseMock()
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } }
		);
	});
};
export const getDefaultMock = () => [
	getPostUsersLoginMockHandler(),
	getPostUsersRefreshMockHandler(),
	getPostUsersCreateMockHandler(),
	getPostUsersUpdateMockHandler(),
	getPostUsersRequestEmailConfirmationMockHandler(),
	getPostUsersConfirmEmailMockHandler(),
	getPostUsersRequestPasswordResetMockHandler(),
	getPostUsersConfirmPasswordResetMockHandler()
];
